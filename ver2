<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Bee's Workday</title>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.170.0/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@farcade/game-sdk@latest/dist/index.min.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      #game-container {
        width: 100%;
        height: 100vh;
        user-select: none;
      } /* Removed custom cursor */
    </style>
  </head>
  <body>
    <div id="game-container"></div>
    <script>
      class IntroScene extends Phaser.Scene {
        constructor() {
          super({ key: "IntroScene" });
        }

        preload() {
          this.load.image(
            "introBackground",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/intro-39BKZySBZmrHWFoRqDyxgDhyAr876u.jpg?4JBE",
          );
        }

        create() {
          // Add background image
          this.add.image(270, 480, "introBackground").setDisplaySize(540, 960);

          // Add game title text in darker gray, italic, and positioned above the center
          this.add
            .text(270, 300, "Bee's Workday", {
              fontFamily: "cursive",
              fontSize: "52px",
              fill: "#333333",
              align: "center",
              fontStyle: "italic",
            })
            .setOrigin(0.5);

          // Add new instructional text below the title with word wrapping
          this.add
            .text(270, 400, "Collect as much nectar from flowers as possible, but avoid poisonous hogweed!", {
              fontFamily: "cursive",
              fontSize: "32px", // Smaller than the title
              fill: "#333333",
              align: "center",
              fontStyle: "italic",
              wordWrap: { width: 500, useAdvancedWrap: true }, // Added word wrapping
            })
            .setOrigin(0.5);

          // Add gold oval "Start" button using graphics
          const startButton = this.add.graphics();
          startButton.fillStyle(0xffd700, 1);
          startButton.fillRoundedRect(170, 500, 200, 80, 40);
          const startText = this.add
            .text(270, 540, "Start", {
              fontFamily: "Arial",
              fontSize: "32px",
              fill: "#000000",
            })
            .setOrigin(0.5);

          startButton.setInteractive(new Phaser.Geom.Rectangle(170, 500, 200, 80), Phaser.Geom.Rectangle.Contains);
          startButton.on("pointerdown", () => {
            this.scene.start("MainScene");
            window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
          });
        }
      }

      class MainScene extends Phaser.Scene {
        constructor() {
          super({ key: "MainScene" });
        }

        preload() {
          this.load.image(
            "gameBackground",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/mainscene-KD9cUb0ZbeIyBKv01v8zawEo7hplhZ.jpg?aUH5",
          );
          this.load.image(
            "pink_poppy_closed",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/poppy-Bcur6BwgVCmNlyHPKfgnCWm3KQUhmo.png?xNV5",
          );
          this.load.image(
            "pink_poppy_open",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/poppy-Bcur6BwgVCmNlyHPKfgnCWm3KQUhmo.png?xNV5",
          );
          this.load.image(
            "anemone_closed",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/anemon-C83c3q3vXWoSYagyJs4G7FzDX3Q8hE.png?7y7q",
          );
          this.load.image(
            "anemone_open",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/anemon-C83c3q3vXWoSYagyJs4G7FzDX3Q8hE.png?7y7q",
          );
          this.load.image(
            "daisy_closed",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/daisy-W6nan9jeusEAWSKuYVwsITVsraQqOD.png?NKDo",
          );
          this.load.image(
            "daisy_open",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/daisy-W6nan9jeusEAWSKuYVwsITVsraQqOD.png?NKDo",
          );
          this.load.image(
            "red_poppy_closed",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/poppy2-Nv3sfqG7RXfQjmHBkqrEG3ZT7G4v2s.png?V2Bm",
          );
          this.load.image(
            "red_poppy_open",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/poppy2-Nv3sfqG7RXfQjmHBkqrEG3ZT7G4v2s.png?V2Bm",
          );
          this.load.image("hogweed", "https://remix.gg/assets/hogweed.png");
          this.load.image(
            "borshevik",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/borsh2-a1tBWZBXyTAKBeWIIfxUo0IgrqtHOd.png?00aU",
          );
          this.load.image(
            "bee",
            "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/422b014a-adff-4211-ac85-e6732ce02352/photo_2025-08-03_16-22-46-removebg-preview-Va9bahTLxYVMMxGwov8Rv0hOSO3BRX.png?jdAs",
          );
        }

        create() {
          this.add.image(270, 480, "gameBackground").setDisplaySize(540, 960);

          // Add draggable bee at center of upper half, increased size by 1.5 times and set to higher depth
          this.bee = this.add.image(270, 240, "bee").setDisplaySize(112.5, 112.5).setDepth(1);
          this.bee.setInteractive();
          this.input.setDraggable(this.bee);

          this.input.on("drag", (pointer, gameObject, dragX, dragY) => {
            gameObject.x = dragX;
            gameObject.y = dragY;
            window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
          });

          this.flowers = this.physics.add.group();
          this.spawnFlower(); // Start the first spawn

          this.score = 0;
          this.scoreText = this.add.text(20, 20, "Score: 0", { fontSize: "32px", fill: "#000" });
          this.timerText = this.add.text(20, 60, "Time: 20", { fontSize: "32px", fill: "#000" }); // Updated initial time text

          this.gameTimer = this.time.addEvent({
            delay: 20000, // Changed to 20 seconds
            callback: () => {
              window.FarcadeSDK.singlePlayer.actions.gameOver({ score: this.score });
            },
            callbackScope: this,
          });

          this.input.on("pointerdown", (pointer) => {
            window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
          });

          window.FarcadeSDK.singlePlayer.actions.ready();
        }

        spawnFlower() {
          const numberToSpawn = Phaser.Math.Between(6, 8); // Spawn 6 to 8 flowers
          const flowerTypes = ["pink_poppy", "anemone", "daisy", "red_poppy", "hogweed", "borshevik"];
          const minDistance = 50; // Minimum distance between flowers

          for (let i = 0; i < numberToSpawn; i++) {
            const type = flowerTypes[Phaser.Math.Between(0, flowerTypes.length - 1)];
            let textureKey;
            let isOpen = false;

            if (type === "borshevik" && Phaser.Math.FloatBetween(0, 1) > 0.5) {
              continue; // Skip spawning borshevik 50% of the time
            }

            if (type === "hogweed" || type === "borshevik") {
              textureKey = type;
            } else {
              textureKey = type + "_open"; // Spawn collectible flowers as open
              isOpen = true;
            }

            if (this.textures.exists(textureKey)) {
              // Only proceed if texture exists
              let attempts = 0;
              let flowerPlaced = false;
              while (attempts < 20 && !flowerPlaced) {
                // Increased attempts to 20
                const x = Phaser.Math.Between(50, 490);
                const y = Phaser.Math.Between(480, 860); // Restrict to lower half of the screen
                const newFlower = this.flowers.create(x, y, textureKey);
                if (type === "borshevik") {
                  newFlower.setScale(0.3); // 1.5 times the original scale of 0.2
                } else {
                  newFlower.setScale(0.2); // Original scale for other flowers
                }
                newFlower.setDepth(0);
                newFlower.setVisible(true); // Ensure visibility
                newFlower.setAlpha(1); // Ensure full opacity
                newFlower.type = type;
                newFlower.isOpen = isOpen;

                let overlaps = false;
                this.flowers.getChildren().forEach((existingFlower) => {
                  if (existingFlower !== newFlower) {
                    if (
                      this.isOverlapping(newFlower, existingFlower) ||
                      Phaser.Math.Distance.Between(newFlower.x, newFlower.y, existingFlower.x, existingFlower.y) <
                        minDistance
                    ) {
                      overlaps = true;
                      newFlower.destroy(); // Destroy and try again if overlapping or too close
                    }
                  }
                });

                if (!overlaps) {
                  flowerPlaced = true;
                  this.time.delayedCall(2000, () => {
                    // Destroy after 2 seconds
                    newFlower.destroy();
                  });
                }
                attempts++;
              }
            } else {
              console.log("Texture not found for: " + textureKey + " - Skipping this flower"); // Log and skip
            }
          }

          // Schedule next spawn every second
          this.time.delayedCall(1000, this.spawnFlower, [], this);
        }

        update() {
          const timeLeft = Math.max(0, Math.ceil(this.gameTimer.getRemaining() / 1000));
          this.timerText.setText("Time: " + timeLeft);

          const pointer = this.input.activePointer;
          if (pointer.isDown) {
            this.flowers.getChildren().forEach((flower) => {
              if (
                this.isOverlapping(this.bee, flower) &&
                flower.isOpen &&
                (flower.type === "pink_poppy" ||
                  flower.type === "anemone" ||
                  flower.type === "daisy" ||
                  flower.type === "red_poppy")
              ) {
                this.score += 10;
                this.scoreText.setText("Score: " + this.score);
                flower.destroy(); // Destroy on collection
                window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
              } else if (
                this.isOverlapping(this.bee, flower) &&
                (flower.type === "hogweed" || flower.type === "borshevik")
              ) {
                window.FarcadeSDK.singlePlayer.actions.gameOver({ score: this.score });
              }
            });
          }
        }

        isOverlapping(gameObject1, gameObject2) {
          const rect1 = gameObject1.getBounds();
          const rect2 = gameObject2.getBounds();
          return Phaser.Geom.Rectangle.Overlaps(rect1, rect2);
        }
      }

      const config = {
        type: Phaser.AUTO,
        width: 540,
        height: 960,
        parent: "game-container",
        scale: {
          mode: Phaser.Scale.FIT,
          autoCenter: Phaser.Scale.CENTER_BOTH,
        },
        scene: [IntroScene, MainScene],
        physics: {
          default: "arcade",
          arcade: { debug: false },
        },
      };

      const game = new Phaser.Game(config);

      window.FarcadeSDK.on("play_again", () => {
        game.scene.start("MainScene");
      });

      window.FarcadeSDK.on("toggle_mute", (data) => {
        if (data.isMuted) {
          console.log("Audio muted");
        } else {
          console.log("Audio unmuted");
        }
      });
    </script>
  </body>
</html>
